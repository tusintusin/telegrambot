import requests
from bs4 import BeautifulSoup
import telebot
import time
import threading
import configparser
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

# === –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram –±–æ—Ç–∞ ===
API_TOKEN = '7534938653:AAEvgUzzN61MuQOk61HEteVRwHaPnZlNDuQ'
CHANNEL_ID = '@dsadsdsawewq'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
URL = 'https://market.tonnel.network/'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ URL –º–∞–≥–∞–∑–∏–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Selenium
options = Options()
options.headless = True
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
paused = False
filters = {'name': set(), 'price': []}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è configparser
config = configparser.ConfigParser()
config_file_path = '/Users/maximholodov/Desktop/Telegram Bots/Test New/config.ini'

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not os.path.exists(config_file_path):
    with open(config_file_path, 'w') as configfile:
        config['Gifts'] = {}
        config['Mute'] = {}
        config['PriceFilter'] = {}
        config.write(configfile)
        print(f"Created new config file at {config_file_path}")
else:
    config.read(config_file_path)
    print(f"Read existing config file from {config_file_path}")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–¥–µ–ª—ã 'Gifts', 'Mute' –∏ 'PriceFilter' —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if 'Gifts' not in config:
    config['Gifts'] = {}
if 'Mute' not in config:
    config['Mute'] = {}
if 'PriceFilter' not in config:
    config['PriceFilter'] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def parse_page():
    driver.get(URL)
    time.sleep(5)  # –ñ–¥—ë–º, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
    soup = BeautifulSoup(driver.page_source, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
    grid_container = soup.find('div', class_='grid w-full grid-cols-2 gap-2 p-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6')
    if not grid_container:
        print("Grid container not found")
        return []

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    gifts = []

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–µ—Ä–≤—ã—Ö 10)
    for gift_div in grid_container.find_all('div', class_='rounded-lg border bg-card text-card-foreground shadow-sm relative w-full max-w-md')[:10]:
        try:
            name = gift_div.find('div', class_='font-semibold text-sm').text.strip()
            order_number = gift_div.find('div', class_='font-semibold text-muted-foreground text-xs').text.strip()
            price = gift_div.find('div', class_='flex items-center gap-1 visible').text.strip()
            gifts.append({'name': name, 'order_number': order_number, 'price': price})
        except AttributeError as e:
            print(f"Error parsing gift: {e}")
            continue
    return gifts

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_message(gift):
    if paused:
        print("Bot is paused. Skipping message sending.")
        return

    gift_name = gift['name'].replace(" ", "").replace("-", "")
    gift_link = f"https://t.me/nft/{gift_name}-{gift['order_number'][1:]}"
    message = f"üéÅ –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: {gift['name']}\nüî¢ –ù–æ–º–µ—Ä: {gift['order_number']}\nüí∞ –¶–µ–Ω–∞: {gift['price']} $TON\nüîó –°—Å—ã–ª–∫–∞: {gift_link}"
    print(f"Attempting to send message: {message}")
    try:
        bot.send_message(CHANNEL_ID, message)
        print(f"Message sent: {message}")
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Failed to send message: {e}")
        if e.result_json['error_code'] == 429:
            retry_after = int(e.result_json['parameters']['retry_after'])
            print(f"Retrying after {retry_after} seconds")
            bot.send_message(CHANNEL_ID, f"Rate limit exceeded. Retrying after {retry_after} seconds.")
            time.sleep(retry_after)
            send_message(gift)
        else:
            print(f"Error details: {e.result_json}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—É–∑—ã
@bot.message_handler(commands=['pause'])
def pause_notifications(message):
    global paused
    paused = True
    bot.reply_to(message, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@bot.message_handler(commands=['resume'])
def resume_notifications(message):
    global paused
    paused = False
    bot.reply_to(message, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(commands=['settings'])
def settings_menu(message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(telebot.types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="filters_list_1"))
    markup.add(telebot.types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ", callback_data="filter_price"))
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="disable_all_filters"))
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
def safe_edit_message_text(text, chat_id, message_id, reply_markup):
    retry_count = 0
    max_retries = 5
    while retry_count < max_retries:
        try:
            bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=reply_markup)
            return
        except telebot.apihelper.ApiTelegramException as e:
            if e.result_json['error_code'] == 429:
                retry_after = int(e.result_json['parameters']['retry_after'])
                print(f"Retrying after {retry_after} seconds due to rate limit")
                bot.send_message(chat_id, f"Rate limit exceeded. Retrying after {retry_after} seconds.")
                time.sleep(retry_after)
                retry_count += 1
            else:
                raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("filters_list_"))
def show_filters(call, page=None):
    if page is None:
        page = int(call.data.split("_")[-1])
    known_gifts = sorted([gift for gift in config['Gifts'].get('known_gifts', '').split(',') if len(gift) >= 2])
    muted_gifts = set(config['Mute'].get('muted_gifts', '').split(','))
    items_per_page = 7
    total_pages = (len(known_gifts) + items_per_page - 1) // items_per_page
    start = (page - 1) * items_per_page
    end = start + items_per_page
    gifts_on_page = known_gifts[start:end]

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏"
    all_gifts_enabled = len(muted_gifts) == 0
    all_gifts_button_text = "‚úÖ" if all_gifts_enabled else "‚òëÔ∏è"
    markup.add(
        telebot.types.InlineKeyboardButton("–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data="toggle_all_gifts"),
        telebot.types.InlineKeyboardButton(all_gifts_button_text, callback_data="toggle_all_gifts")
    )

    for gift in gifts_on_page:
        enabled = gift not in muted_gifts
        button_text = "‚úÖ" if enabled else "‚òëÔ∏è"
        markup.add(
            telebot.types.InlineKeyboardButton(gift, callback_data=f"gift_{gift}"),
            telebot.types.InlineKeyboardButton(button_text, callback_data=f"toggle_{gift}_{page}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 1:
        nav_buttons.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"filters_list_{page-1}"))
    if page < total_pages:
        nav_buttons.append(telebot.types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"filters_list_{page+1}"))
    markup.add(*nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_settings"))
    safe_edit_message_text("–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_"))
def toggle_notification(call):
    data = call.data.split("_")
    gift_name = "_".join(data[1:-1])
    page = int(data[-1])
    muted_gifts = set(config['Mute'].get('muted_gifts', '').split(','))
    if gift_name in muted_gifts:
        muted_gifts.remove(gift_name)
        bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {gift_name} –≤–∫–ª—é—á–µ–Ω—ã.")
    else:
        muted_gifts.add(gift_name)
        bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {gift_name} –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º config.ini
    config['Mute']['muted_gifts'] = ','.join(muted_gifts)
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    
    show_filters(call, page)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == "toggle_all_gifts")
def toggle_all_gifts(call):
    known_gifts = set(config['Gifts'].get('known_gifts', '').split(','))
    muted_gifts = set(config['Mute'].get('muted_gifts', '').split(','))

    if len(muted_gifts) == 0:
        muted_gifts = known_gifts
        bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        muted_gifts.clear()
        bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã.")

    # –û–±–Ω–æ–≤–ª—è–µ–º config.ini
    config['Mute']['muted_gifts'] = ','.join(muted_gifts)
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    
    show_filters(call)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
@bot.callback_query_handler(func=lambda call: call.data == "filter_price")
def add_price_filter(call):
    min_price = config['PriceFilter'].get('min_price', None)
    max_price = config['PriceFilter'].get('max_price', None)
    if min_price and max_price:
        filter_status = f"–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç {min_price} –¥–æ {max_price}"
    else:
        filter_status = "–§–∏–ª—å—Ç—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(telebot.types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–û—Ç)", callback_data="set_min_price"))
    markup.add(telebot.types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–î–æ)", callback_data="set_max_price"))
    markup.add(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_settings"))
    bot.edit_message_text(filter_status, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "set_min_price")
def set_min_price(call):
    msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–û—Ç):")
    bot.register_next_step_handler(msg, save_min_price, call)

def save_min_price(message, call):
    min_price = message.text
    config['PriceFilter']['min_price'] = min_price
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    bot.send_message(call.message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {min_price}")
    add_price_filter(call)

@bot.callback_query_handler(func=lambda call: call.data == "set_max_price")
def set_max_price(call):
    msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–î–æ):")
    bot.register_next_step_handler(msg, save_max_price, call)

def save_max_price(message, call):
    max_price = message.text
    config['PriceFilter']['max_price'] = max_price
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    bot.send_message(call.message.chat.id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {max_price}")
    add_price_filter(call)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "disable_all_filters")
def disable_all_filters(call):
    filters['name'].clear()
    filters['price'].clear()
    config['Mute']['muted_gifts'] = ''
    config['PriceFilter']['min_price'] = '0'
    config['PriceFilter']['max_price'] = 'inf'
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    bot.answer_callback_query(call.id, "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    back_to_settings(call)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data == "remove_filter")
def remove_filter_menu(call):
    if filters['name'] or filters['price']:
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        for f in filters['name']:
            markup.add(telebot.types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {f}", callback_data=f"remove_name_{f}"))
        for p in filters['price']:
            markup.add(telebot.types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –û—Ç {p[0]} –î–æ {p[1]}", callback_data=f"remove_price_{p[0]}_{p[1]}"))
        markup.add(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_settings"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_name_"))
def remove_name_filter(call):
    filter_to_remove = call.data.replace("remove_name_", "")
    filters['name'].remove(filter_to_remove)
    bot.send_message(call.message.chat.id, f"–§–∏–ª—å—Ç—Ä {filter_to_remove} —É–¥–∞–ª—ë–Ω.")
    back_to_settings(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_price_"))
def remove_price_filter(call):
    _, min_price, max_price = call.data.split("_")
    filters['price'].remove((min_price, max_price))
    bot.send_message(call.message.chat.id, f"–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: –û—Ç {min_price} –î–æ {max_price} —É–¥–∞–ª—ë–Ω.")
    back_to_settings(call)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(telebot.types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="filters_list_1"))
    markup.add(telebot.types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ", callback_data="filter_price"))
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="disable_all_filters"))
    bot.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ config.ini
@bot.message_handler(commands=['clearconfig'])
def clear_config(message):
    config['Gifts'] = {}
    config['Mute'] = {}
    config['PriceFilter'] = {}
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    bot.reply_to(message, "config.ini –æ—á–∏—â–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ config.ini
@bot.message_handler(commands=['showconfig'])
def show_config(message):
    known_gifts = config['Gifts'].get('known_gifts', '')
    muted_gifts = config['Mute'].get('muted_gifts', '')
    min_price = config['PriceFilter'].get('min_price', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    max_price = config['PriceFilter'].get('max_price', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    response = "–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞:\n"
    response += f"–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n{known_gifts.replace(',', '\n')}\n\n"
    response += f"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n{muted_gifts.replace(',', '\n')}\n\n"
    response += f"–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price}"
    bot.send_message(message.chat.id, response)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def parse_and_notify():
    known_gifts = set(config['Gifts'].get('known_gifts', '').split(',')) if 'known_gifts' in config['Gifts'] else set()
    muted_gifts = set(config['Mute'].get('muted_gifts', '').split(',')) if 'muted_gifts' in config['Mute'] else set()
    min_price = float(config['PriceFilter'].get('min_price', '0'))
    max_price = float(config['PriceFilter'].get('max_price', 'inf'))
    print("Bot started...")

    try:
        while True:
            if not paused:
                try:
                    gifts = parse_page()
                    print(f"Parsed {len(gifts)} gifts")

                    for gift in gifts:
                        name = gift['name']
                        print(f"Processing gift: {gift}")

                        if len(name) < 2:
                            print(f"Skipping gift {name} due to short name")
                            continue

                        if name in muted_gifts:
                            print(f"Skipping gift {name} as it is muted")
                            continue

                        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                        if name in filters['name']:
                            print(f"Skipping gift {name} due to name filter")
                            continue
                        price_value = float(gift['price'].replace(',', '.'))
                        if not (min_price <= price_value <= max_price):
                            print(f"Skipping gift {name} due to price filter: {price_value}")
                            continue

                        print(f"Sending message for gift: {gift}")
                        send_message(gift)

                        # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –≤ config.ini, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
                        if name not in known_gifts:
                            known_gifts.add(name)
                            config['Gifts']['known_gifts'] = ','.join(known_gifts)
                            with open(config_file_path, 'w') as configfile:
                                config.write(configfile)
                            print(f"Updated config.ini with new gift: {name}")

                    time.sleep(3)  # –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    time.sleep(3)
            else:
                time.sleep(3)
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        driver.quit()

# –ó–∞–ø—É—Å–∫ polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if __name__ == '__main__':
    threading.Thread(target=bot.polling, kwargs={'none_stop': True}).start()
    parse_and_notify()
